#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('express-demo:server');
var http = require('http');

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '1874');
app.set('port', port);



/**
 * Create HTTP/HTTPS server.
 */

var server = http.createServer(app);

if (process.env.NODE_ENV === "development") {
  server = http.createServer(app);
} else if (process.env.NODE_ENV === "production") {
  var https = require('https');
  var path = require('path')
  var fs = require('fs');
  //https 需要申请 SSL证书，填写服务器上存放证书的路径即可，目前根目录上没有证书文件（运行生产环境命令会报错），请更具自己的情况添加。
  var options = {
    key: fs.readFileSync(path.join(__dirname, '../privkey.pem')),  
    cert: fs.readFileSync(path.join(__dirname, '../fullchain.pem'))
  }
  server = https.createServer(options, app);
}
server.listen(port, () => {
  console.log(`Successfully! express app listening on port ${port}...`)
});
server.on('error', onError);
server.on('listening', () => {
  onListening(server)
});

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string' ?
    'Pipe ' + port :
    'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening(server) {
  var addr = server.address();
  var bind = typeof addr === 'string' ?
    'pipe ' + addr :
    'port ' + addr.port;
  debug('Listening on ' + bind);
}